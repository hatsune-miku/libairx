// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/discovery_packet.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:airx.DiscoveryPacket)
pub struct DiscoveryPacket {
    // message fields
    // @@protoc_insertion_point(field:airx.DiscoveryPacket.address)
    pub address: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:airx.DiscoveryPacket.server_port)
    pub server_port: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:airx.DiscoveryPacket.group_identifier)
    pub group_identifier: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:airx.DiscoveryPacket.need_response)
    pub need_response: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:airx.DiscoveryPacket.host_name)
    pub host_name: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:airx.DiscoveryPacket.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DiscoveryPacket {
    fn default() -> &'a DiscoveryPacket {
        <DiscoveryPacket as ::protobuf::Message>::default_instance()
    }
}

impl DiscoveryPacket {
    pub fn new() -> DiscoveryPacket {
        ::std::default::Default::default()
    }

    // required uint32 address = 1;

    pub fn address(&self) -> u32 {
        self.address.unwrap_or(0)
    }

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: u32) {
        self.address = ::std::option::Option::Some(v);
    }

    // required uint32 server_port = 2;

    pub fn server_port(&self) -> u32 {
        self.server_port.unwrap_or(0)
    }

    pub fn clear_server_port(&mut self) {
        self.server_port = ::std::option::Option::None;
    }

    pub fn has_server_port(&self) -> bool {
        self.server_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_port(&mut self, v: u32) {
        self.server_port = ::std::option::Option::Some(v);
    }

    // required uint32 group_identifier = 3;

    pub fn group_identifier(&self) -> u32 {
        self.group_identifier.unwrap_or(0)
    }

    pub fn clear_group_identifier(&mut self) {
        self.group_identifier = ::std::option::Option::None;
    }

    pub fn has_group_identifier(&self) -> bool {
        self.group_identifier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group_identifier(&mut self, v: u32) {
        self.group_identifier = ::std::option::Option::Some(v);
    }

    // required bool need_response = 4;

    pub fn need_response(&self) -> bool {
        self.need_response.unwrap_or(false)
    }

    pub fn clear_need_response(&mut self) {
        self.need_response = ::std::option::Option::None;
    }

    pub fn has_need_response(&self) -> bool {
        self.need_response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_need_response(&mut self, v: bool) {
        self.need_response = ::std::option::Option::Some(v);
    }

    // required string host_name = 5;

    pub fn host_name(&self) -> &str {
        match self.host_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_host_name(&mut self) {
        self.host_name = ::std::option::Option::None;
    }

    pub fn has_host_name(&self) -> bool {
        self.host_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_host_name(&mut self, v: ::std::string::String) {
        self.host_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host_name(&mut self) -> &mut ::std::string::String {
        if self.host_name.is_none() {
            self.host_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.host_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_host_name(&mut self) -> ::std::string::String {
        self.host_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "address",
            |m: &DiscoveryPacket| { &m.address },
            |m: &mut DiscoveryPacket| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "server_port",
            |m: &DiscoveryPacket| { &m.server_port },
            |m: &mut DiscoveryPacket| { &mut m.server_port },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "group_identifier",
            |m: &DiscoveryPacket| { &m.group_identifier },
            |m: &mut DiscoveryPacket| { &mut m.group_identifier },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "need_response",
            |m: &DiscoveryPacket| { &m.need_response },
            |m: &mut DiscoveryPacket| { &mut m.need_response },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "host_name",
            |m: &DiscoveryPacket| { &m.host_name },
            |m: &mut DiscoveryPacket| { &mut m.host_name },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DiscoveryPacket>(
            "DiscoveryPacket",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DiscoveryPacket {
    const NAME: &'static str = "DiscoveryPacket";

    fn is_initialized(&self) -> bool {
        if self.address.is_none() {
            return false;
        }
        if self.server_port.is_none() {
            return false;
        }
        if self.group_identifier.is_none() {
            return false;
        }
        if self.need_response.is_none() {
            return false;
        }
        if self.host_name.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.address = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.server_port = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.group_identifier = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.need_response = ::std::option::Option::Some(is.read_bool()?);
                },
                42 => {
                    self.host_name = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.address {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.server_port {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.group_identifier {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.need_response {
            my_size += 1 + 1;
        }
        if let Some(v) = self.host_name.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.address {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.server_port {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.group_identifier {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.need_response {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.host_name.as_ref() {
            os.write_string(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DiscoveryPacket {
        DiscoveryPacket::new()
    }

    fn clear(&mut self) {
        self.address = ::std::option::Option::None;
        self.server_port = ::std::option::Option::None;
        self.group_identifier = ::std::option::Option::None;
        self.need_response = ::std::option::Option::None;
        self.host_name = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DiscoveryPacket {
        static instance: DiscoveryPacket = DiscoveryPacket {
            address: ::std::option::Option::None,
            server_port: ::std::option::Option::None,
            group_identifier: ::std::option::Option::None,
            need_response: ::std::option::Option::None,
            host_name: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DiscoveryPacket {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DiscoveryPacket").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DiscoveryPacket {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DiscoveryPacket {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cproto/discovery_packet.proto\x12\x04airx\"\xb9\x01\n\x0fDiscoveryP\
    acket\x12\x18\n\x07address\x18\x01\x20\x02(\rR\x07address\x12\x1f\n\x0bs\
    erver_port\x18\x02\x20\x02(\rR\nserverPort\x12)\n\x10group_identifier\
    \x18\x03\x20\x02(\rR\x0fgroupIdentifier\x12#\n\rneed_response\x18\x04\
    \x20\x02(\x08R\x0cneedResponse\x12\x1b\n\thost_name\x18\x05\x20\x02(\tR\
    \x08hostNameJ\x8d\x03\n\x06\x12\x04\0\0\n\x01\n\x08\n\x01\x0c\x12\x03\0\
    \0\x12\n\x08\n\x01\x02\x12\x03\x02\0\r\n\n\n\x02\x04\0\x12\x04\x04\0\n\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x17\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\x05\x02\x1e\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x05\x02\n\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x05\x0b\x11\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x05\x12\x19\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\x1c\x1d\n\x0b\n\
    \x04\x04\0\x02\x01\x12\x03\x06\x02\"\n\x0c\n\x05\x04\0\x02\x01\x04\x12\
    \x03\x06\x02\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\x0b\x11\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x06\x12\x1d\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x06\x20!\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x07\x02'\n\x0c\n\x05\
    \x04\0\x02\x02\x04\x12\x03\x07\x02\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03\x07\x0b\x11\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x07\x12\"\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\x07%&\n\x0b\n\x04\x04\0\x02\x03\x12\x03\
    \x08\x02\"\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\x08\x02\n\n\x0c\n\x05\
    \x04\0\x02\x03\x05\x12\x03\x08\x0b\x0f\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03\x08\x10\x1d\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x08\x20!\n\x0b\n\
    \x04\x04\0\x02\x04\x12\x03\t\x02\x20\n\x0c\n\x05\x04\0\x02\x04\x04\x12\
    \x03\t\x02\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\t\x0b\x11\n\x0c\n\x05\
    \x04\0\x02\x04\x01\x12\x03\t\x12\x1b\n\x0c\n\x05\x04\0\x02\x04\x03\x12\
    \x03\t\x1e\x1f\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(DiscoveryPacket::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
